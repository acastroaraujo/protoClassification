[{"path":"https://acastroaraujo.github.io/protoClassification/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Andr√©s Castro Ara√∫jo Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"andr√©s castro ara√∫jo. Author, maintainer.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"castro ara√∫jo (2025). protoClassification: Prototype Model Classification. R package version 0.1.0, https://github.com/acastroaraujo/protoClassification.","code":"@Manual{,   title = {protoClassification: Prototype Model of Classification},   author = {andr√©s {castro ara√∫jo}},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/acastroaraujo/protoClassification}, }"},{"path":"https://acastroaraujo.github.io/protoClassification/index.html","id":"protoclassification","dir":"","previous_headings":"","what":"Prototype Model of Classification","title":"Prototype Model of Classification","text":"Install development version protoClassification GitHub :","code":"# install.packages(\"pak\") pak::pak(\"acastroaraujo/protoClassification\")"},{"path":"https://acastroaraujo.github.io/protoClassification/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get Started","title":"Prototype Model of Classification","text":"simulate dataset need create decide couple things first. number KK dimensions. marginal probabilities dimension. correlation matrix dimensions. Generate data. Note. parameters stored params attribute output. can verify column means roughly correspond marginal probabilities. order verify data follows correlation structure rho calculate ‚Äútetrachoric correlation.‚Äù Additional stuff Prototype Classification Model: w vector attention weights k P list prototypes, one per category. g (gamma) sensitivity parameter. Calculate distance similarity one prototype time: Calculate distance, similarity, probabilities multiple prototypes time: consolidate() previous output single data frame easier visualization. Note. Since binary data implemented, difference Manhattan Euclidean distance!","code":"library(protoClassification) set.seed(1) K <- 6 # 1st step marginals <- rbeta(K, 2, 2) # 2nd step rho <- rlkjcorr(1, K, eta = 1) # 3rd step set.seed(1) sim_data <- make_binary_data(marginals, rho, obs = 1e3) sim_data #>  #> ‚îÄ‚îÄ Data ‚îÄ‚îÄ #>  #> 1000 obs. of  6 variables: #>  $ x1: int  0 1 0 1 0 1 0 1 0 1 ... #>  $ x2: int  0 1 0 1 1 1 0 1 1 1 ... #>  $ x3: int  0 1 1 0 1 0 0 0 1 0 ... #>  $ x4: int  1 1 1 1 1 1 1 1 1 1 ... #>  $ x5: int  1 1 1 1 0 0 1 1 1 1 ... #>  $ x6: int  0 1 0 0 1 0 0 1 0 1 ... #>  #> ‚îÄ‚îÄ Parameters ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Marginal Probabilities: #>   x1   x2   x3   x4   x5   x6  #> 0.33 0.55 0.27 0.88 0.59 0.28 #>  #>  #> ‚îÄ‚îÄ Correlation Matrix: #>       x1    x2    x3    x4    x5    x6 #> x1  1.00  0.22  0.29  0.15 -0.02  0.36 #> x2  0.22  1.00 -0.08 -0.21 -0.01  0.37 #> x3  0.29 -0.08  1.00 -0.75  0.34  0.08 #> x4  0.15 -0.21 -0.75  1.00 -0.20 -0.34 #> x5 -0.02 -0.01  0.34 -0.20  1.00 -0.03 #> x6  0.36  0.37  0.08 -0.34 -0.03  1.00 colMeans(sim_data) #>    x1    x2    x3    x4    x5    x6  #> 0.326 0.554 0.274 0.899 0.588 0.275 psych::tetrachoric(sim_data)$rho #>             x1          x2          x3         x4          x5          x6 #> x1  1.00000000  0.23375492  0.28118697  0.1442114 -0.01192531  0.40365755 #> x2  0.23375492  1.00000000 -0.13315127 -0.1448709  0.03404136  0.38467926 #> x3  0.28118697 -0.13315127  1.00000000 -0.7612102  0.40485490  0.07792155 #> x4  0.14421140 -0.14487091 -0.76121019  1.0000000 -0.31759978 -0.34664697 #> x5 -0.01192531  0.03404136  0.40485490 -0.3175998  1.00000000 -0.08953172 #> x6  0.40365755  0.38467926  0.07792155 -0.3466470 -0.08953172  1.00000000 set.seed(1) w <- runif(K) w <- w / sum(w) g <- 10 d <- calculateDistSim(   data = sim_data,   P = rep(1, K),   w = w,   g = g )  str(d) #> 'data.frame':    1000 obs. of  2 variables: #>  $ distance  : num  0.655 0 0.477 0.457 0.145 ... #>  $ similarity: num  0.00143 1 0.00846 0.01035 0.23423 ... prototypes <- list(   P1 = rep(1, K),   P2 = rep(0, K),   P3 = rep(1:0, K / 2) )  g <- rep(10, 3)  out <- compute(sim_data, prototypes, w, g) out #>  #> ‚îÄ‚îÄ Output ‚îÄ‚îÄ #>  #>  $ distance      1000 obs. of  3 variables #>  $ similarity    1000 obs. of  3 variables #>  $ probabilities 1000 obs. of  3 variables #>  $ data          1000 obs. of  6 variables #>  #> ‚îÄ‚îÄ Prototypes ‚îÄ‚îÄ #>  #>  $ P1: num [1:6] 1 1 1 1 1 1 #>  $ P2: num [1:6] 0 0 0 0 0 0 #>  $ P3: int [1:6] 1 0 1 0 1 0 #>  #> ‚îÄ‚îÄ Distance ‚îÄ‚îÄ #>  #> Manhattan (r = 1) #>  #> ‚îÄ‚îÄ Sensitivity ‚îÄ‚îÄ #>  #> g1 g2 g3  #> 10 10 10 #>  #> ‚îÄ‚îÄ Attention Weights ‚îÄ‚îÄ #>  #>    w1    w2    w3    w4    w5    w6  #> 0.082 0.116 0.178 0.282 0.063 0.279 #>  #> ‚îÄ‚îÄ Marginal Probabilities ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ `colMeans(.$data)` #>    x1    x2    x3    x4    x5    x6  #> 0.326 0.554 0.274 0.899 0.588 0.275 #>  #> ‚îÄ‚îÄ `colMeans(.$probabilities)` #>        C1        C2        C3  #> 0.3883449 0.4360664 0.1755887 d <- consolidate(out) str(d) #> 'data.frame':    1000 obs. of  15 variables: #>  $ prob1: num  0.0379 0.9988 0.212 0.5783 0.998 ... #>  $ prob2: num  8.45e-01 4.53e-05 1.34e-01 2.45e-01 8.26e-04 ... #>  $ prob3: num  0.11692 0.00115 0.65354 0.17654 0.00115 ... #>  $ sim1 : num  0.00143 1 0.00846 0.01035 0.23423 ... #>  $ sim2 : num  3.18e-02 4.54e-05 5.36e-03 4.39e-03 1.94e-04 ... #>  $ sim3 : num  0.0044 0.001149 0.026083 0.003159 0.000269 ... #>  $ dist1: num  0.655 0 0.477 0.457 0.145 ... #>  $ dist2: num  0.345 1 0.523 0.543 0.855 ... #>  $ dist3: num  0.543 0.677 0.365 0.576 0.822 ... #>  $ x1   : int  0 1 0 1 0 1 0 1 0 1 ... #>  $ x2   : int  0 1 0 1 1 1 0 1 1 1 ... #>  $ x3   : int  0 1 1 0 1 0 0 0 1 0 ... #>  $ x4   : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ x5   : int  1 1 1 1 0 0 1 1 1 1 ... #>  $ x6   : int  0 1 0 0 1 0 0 1 0 1 ..."},{"path":"https://acastroaraujo.github.io/protoClassification/index.html","id":"marginal-and-conditional-probabilities","dir":"","previous_headings":"","what":"Marginal and Conditional Probabilities","title":"Prototype Model of Classification","text":"far, single simulation requires marginal probabilities element ùê±\\mathbf{x} specified outset. relevant piece information get compute() function .$probabilities object, calculates probability given individual simulated dataset belong prototype categories. allows us calculate marginal probabilities category. ingenuity, can use information get conditional probabilities . Pr(Xk=1‚à£C=c) \\Pr(X_k = 1 \\mid C = c) Pr(Xk=0‚à£C=c) \\Pr(X_k = 0 \\mid C = c) Pr(C=c‚à£Xk) \\Pr(C = c \\mid X_k) Alternatively, ‚Äôs easier use summary() function extract conditional marginal probabilities.","code":"colMeans(out$data) # cf. `marginals` argument in `make_binary_data()` #>    x1    x2    x3    x4    x5    x6  #> 0.326 0.554 0.274 0.899 0.588 0.275 colMeans(out$probabilities) #>        C1        C2        C3  #> 0.3883449 0.4360664 0.1755887 conditionalProbs(out, \"features\") #>           x1        x2         x3        x4        x5         x6 #> C1 0.5226571 0.7802353 0.32826487 0.9332301 0.6171392 0.62588499 #> C2 0.1302299 0.4297247 0.05791891 0.9465871 0.4820181 0.03806980 #> C3 0.3770770 0.3621551 0.69020964 0.7052639 0.7862111 0.08786438 1 - conditionalProbs(out, \"features\") #>           x1        x2        x3         x4        x5        x6 #> C1 0.4769570 0.2200126 0.6714007 0.06717440 0.3829206 0.3734904 #> C2 0.8703417 0.5706125 0.9425701 0.05316343 0.5189671 0.9620408 #> C3 0.6227137 0.6362298 0.3103042 0.29413893 0.2117976 0.9130266 conditionalProbs(out, type = \"categories\") #> $`Xk=0` #>           C1        C2         C3 #> x1 0.2743383 0.5632908 0.16237092 #> x2 0.1926099 0.5577848 0.24960538 #> x3 0.3591157 0.5664215 0.07446281 #> x4 0.2566337 0.2286733 0.51469307 #> x5 0.3608689 0.5489563 0.09017476 #> x6 0.2001655 0.5788414 0.22099310 #>  #> $`Xk=1` #>           C1         C2         C3 #> x1 0.6236135 0.17344785 0.20293865 #> x2 0.5456643 0.33832130 0.11601444 #> x3 0.4652701 0.09116788 0.44356204 #> x4 0.4029833 0.45951724 0.13749944 #> x5 0.4073537 0.35719728 0.23544898 #> x6 0.8839345 0.06015273 0.05591273 probs <- summary(out) probs #>  #> ‚îÄ‚îÄ Categories ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Marginals: #>    C1    C2    C3  #> 0.388 0.436 0.176 #>  #> ‚îÄ‚îÄ Conditionals: #> $`Xk=0` #>       C1    C2    C3 #> x1 0.276 0.562 0.162 #> x2 0.193 0.558 0.249 #> x3 0.360 0.565 0.075 #> x4 0.258 0.231 0.511 #> x5 0.362 0.548 0.091 #> x6 0.202 0.578 0.220 #>  #> $`Xk=1` #>       C1    C2    C3 #> x1 0.624 0.173 0.202 #> x2 0.548 0.337 0.116 #> x3 0.467 0.092 0.441 #> x4 0.404 0.458 0.137 #> x5 0.409 0.357 0.234 #> x6 0.884 0.060 0.056 #>  #> ‚îÄ‚îÄ Features ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Marginals: #>    x1    x2    x3    x4    x5    x6  #> 0.326 0.554 0.274 0.899 0.588 0.275 #>  #> ‚îÄ‚îÄ Conditionals: #>       x1    x2    x3    x4    x5    x6 #> C1 0.523 0.779 0.329 0.933 0.618 0.625 #> C2 0.129 0.429 0.057 0.946 0.480 0.038 #> C3 0.378 0.364 0.691 0.705 0.788 0.088"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/calculateDistSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distances and similarity. ‚Äî calculateDistSim","title":"Calculate distances and similarity. ‚Äî calculateDistSim","text":"Calculate distances similarity features prototype. compute function multiple prototypes.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/calculateDistSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distances and similarity. ‚Äî calculateDistSim","text":"","code":"calculateDistSim(data, P, w, g, r = 1)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/calculateDistSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distances and similarity. ‚Äî calculateDistSim","text":"data data frame, returned `make_data()` function P K-sized vector binary features (.e., prototype) w K-sized vector attention weights g sensitivity parameter, number larger zero r type distance, 1 Manhattan, 2 Euclidean","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/calculateDistSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distances and similarity. ‚Äî calculateDistSim","text":"data frame distance similarity","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/compositionalEffect.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Compositional Effects by Modifying Model Parameters ‚Äî compositionalEffect","title":"Compare Compositional Effects by Modifying Model Parameters ‚Äî compositionalEffect","text":"Computes difference conditional probabilities relative risk ratios baseline prototype computation modified version specific parameters changed. function provides streamlined way analyze changes attention weights, sensitivity parameters, prototype definitions affect resulting probability distributions category assignments.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/compositionalEffect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Compositional Effects by Modifying Model Parameters ‚Äî compositionalEffect","text":"","code":"compositionalEffect(baseline, ..., s = 1000)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/compositionalEffect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Compositional Effects by Modifying Model Parameters ‚Äî compositionalEffect","text":"baseline prototypeComputation object, created compute. serves baseline condition specific parameters modified comparison. ... Named arguments specifying parameters modify. Must one : w K-sized numeric vector attention weights. Must sum     1 values must non-negative. g numeric vector sensitivity parameters, one per     prototype. values must non-negative (>= 0). prototypes list prototype vectors. prototype     must binary vector length number features     baseline data. parameters (data, distance type) inherited baseline. s Integer. Number draws sample probability estimation. Default 1000. Higher values provide precision increase computation time.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/compositionalEffect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Compositional Effects by Modifying Model Parameters ‚Äî compositionalEffect","text":"compositionalEffect object (inherits list)   containing two data frames: diff Data frame probability differences       (comparison - baseline). Positive values indicate higher probabilities       modified condition, negative values indicate lower probabilities. rr Data frame relative risk ratios       (comparison / baseline). Values > 1 indicate higher relative probability       modified condition, values < 1 indicate lower relative probability,       values = 1 indicate change. data frames rows representing categories columns representing   features.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/compositionalEffect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare Compositional Effects by Modifying Model Parameters ‚Äî compositionalEffect","text":"function creates modified prototype computation : Taking baseline computation's data parameters Replacing specified parameters new values provided ... Computing new prototype analysis compute Comparing conditional feature probabilities P(X|C) baseline modified versions comparison metrics computed : Difference: modified_prob - baseline_prob Relative Risk: modified_prob / baseline_prob approach allows systematic sensitivity analysis modifying one parameter time holding others constant.","code":""},{"path":[]},{"path":"https://acastroaraujo.github.io/protoClassification/reference/compute.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Distances and Similarities to Multiple Prototypes ‚Äî compute","title":"Calculate Distances and Similarities to Multiple Prototypes ‚Äî compute","text":"Calculates distances similarity scores set observations single prototype using weighted distance metrics. function implements core distance similarity calculations used prototype-based classification models.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/compute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Distances and Similarities to Multiple Prototypes ‚Äî compute","text":"","code":"compute(data, prototypes, w, g, r = 1L)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/compute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Distances and Similarities to Multiple Prototypes ‚Äî compute","text":"data data frame binary features (0s 1s), returned make_binary_data. row represents observation column represents binary feature. prototypes list prototype vectors. must length number columns data contain binary values (0 1). w numeric vector attention weights, one feature. Must : Length Equal length(P) ncol(data) Values Non-negative sum 1 g numeric sensitivity parameter controlling steepness similarity function. Must non-negative (>= 0). Higher values make similarity function sensitive distances. r Integer specifying distance metric type. Note irrelevant working binary data. 1 Manhattan distance (L1 norm) 2 Euclidean distance (L2 norm)","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/compute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Distances and Similarities to Multiple Prototypes ‚Äî compute","text":"data frame nrow(data) rows two columns: distance Numeric vector weighted distances       observation prototype similarity Numeric vector similarity scores, computed       exp(-g * distance) prototypeComputation object containing: distance Data frame distances observation       prototype similarity Data frame similarity scores       observation prototype probabilities Data frame category membership probabilities data original input data object also stores input parameters attributes.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/compute.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Distances and Similarities to Multiple Prototypes ‚Äî compute","text":"function implements prototype-based categorization model : 1. **Distance Calculation**: observation \\(x\\) prototype \\(P_j\\):    $$d(x, P_j) = \\sum_{k=1}^{K} w_k |x_k - P_{j,k}|^r$$ 2. **Similarity Calculation**:    $$s(x, P_j) = \\exp(-g_j \\cdot d(x, P_j))$$ 3. **Probability Calculation**:    $$P(C_j|x) = \\frac{s(x, P_j)}{\\sum_{=1}^{n} s(x, P_i)}$$","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/conditionalProbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Conditional Probabilities from Prototype Model ‚Äî conditionalProbs","title":"Calculate Conditional Probabilities from Prototype Model ‚Äî conditionalProbs","text":"Computes point estimates conditional probabilities prototype computation, either P(X|C) (feature probabilities given categories) P(C|X) (category probabilities given feature values). function provides expected values conditional probability distributions.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/conditionalProbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Conditional Probabilities from Prototype Model ‚Äî conditionalProbs","text":"","code":"conditionalProbs(x, type = c(\"features\", \"categories\"), s = 500)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/conditionalProbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Conditional Probabilities from Prototype Model ‚Äî conditionalProbs","text":"x prototypeComputation object created compute. type Character string specifying type conditional probabilities: \"features\" Returns P(X|C) - probability features given categories \"categories\" Returns P(C|X) - probability categories given feature values s Integer. Number posterior draws used sampling-based estimation. Default 500. Results averaged across draws provide point estimates.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/conditionalProbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Conditional Probabilities from Prototype Model ‚Äî conditionalProbs","text":"return structure depends type parameter: type = \"features\":   data frame categories rows features columns, cell   contains P(X_k = 1 | C_j). get P(X_k = 0 | C_j) can calculate 1 - \"data frame\". type = \"categories\":   list two elements: Xk=0 Matrix P(C_j | X_k = 0) feature k category j Xk=1 Matrix P(C_j | X_k = 1) feature k category j","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/conditionalProbs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Conditional Probabilities from Prototype Model ‚Äî conditionalProbs","text":"function provides point estimates taking mean sampling distributions generated conditionalProbsSample. conditional probabilities represent: P(X|C): Given observation belongs category C,     probability feature X value 1? P(C|X): Given feature X specific value (0 1),     probability observation belongs category C?","code":""},{"path":[]},{"path":"https://acastroaraujo.github.io/protoClassification/reference/conditionalProbsSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Conditional Probabilities from Prototype Model ‚Äî conditionalProbsSample","title":"Sample Conditional Probabilities from Prototype Model ‚Äî conditionalProbsSample","text":"Generates posterior draws conditional probabilities prototype computation, either P(X|C) (feature probabilities given categories) P(C|X) (category probabilities given feature values). function primarily used internally functions can useful uncertainty quantification.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/conditionalProbsSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Conditional Probabilities from Prototype Model ‚Äî conditionalProbsSample","text":"","code":"conditionalProbsSample(x, type = c(\"features\", \"categories\"), s = 500)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/conditionalProbsSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Conditional Probabilities from Prototype Model ‚Äî conditionalProbsSample","text":"x prototypeComputation object created compute. type Character string specifying type conditional probabilities: \"features\" Returns P(X|C) - probability features given categories \"categories\" Returns P(C|X) - probability categories given feature values s Integer. Number posterior draws sample. Default 500. Higher values provide stable estimates increase computation time.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/conditionalProbsSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Conditional Probabilities from Prototype Model ‚Äî conditionalProbsSample","text":"return structure depends type parameter: type = \"features\":   list one element per category, element s √ó K   matrix feature probabilities (K = number features). type = \"categories\":   list one element per feature, element   s √ó n_categories √ó 2 array showing category probabilities   feature values 0 1.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/conditionalProbsSample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample Conditional Probabilities from Prototype Model ‚Äî conditionalProbsSample","text":"function implements sampling-based approach estimate conditional probabilities: 1. observation, sample category assignments based computed    membership probabilities 2. Repeat process s times create multiple datasets 3. Calculate conditional probabilities sampled dataset approach captures uncertainty category assignments provides distribution conditional probability estimates rather point estimates.","code":""},{"path":[]},{"path":"https://acastroaraujo.github.io/protoClassification/reference/consolidate.html","id":null,"dir":"Reference","previous_headings":"","what":"Consolidate Prototype Computation Results ‚Äî consolidate","title":"Consolidate Prototype Computation Results ‚Äî consolidate","text":"Combines components prototype computation (probabilities, similarities, distances, original data) single data frame easier analysis export.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/consolidate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Consolidate Prototype Computation Results ‚Äî consolidate","text":"","code":"consolidate(x)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/consolidate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Consolidate Prototype Computation Results ‚Äî consolidate","text":"x prototypeComputation object created compute.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/consolidate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Consolidate Prototype Computation Results ‚Äî consolidate","text":"data frame containing: Probability columns Named prob1, prob2, etc.,       representing category membership probabilities Similarity columns Named sim1, sim2, etc.,       representing similarity scores prototype Distance columns Named dist1, dist2, etc.,       representing distances prototype Feature columns Original binary feature data number probability, similarity, distance columns equals   number prototypes.","code":""},{"path":[]},{"path":"https://acastroaraujo.github.io/protoClassification/reference/dlkjcorr.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-density of the LKJ distribution for correlation matrices ‚Äî dlkjcorr","title":"Compute the log-density of the LKJ distribution for correlation matrices ‚Äî dlkjcorr","text":"Computes (log) probability density correlation matrix LKJ (Lewandowski-Kurowicka-Joe) distribution. LKJ distribution parameterized shape parameter eta controls concentration around identity matrix.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/dlkjcorr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-density of the LKJ distribution for correlation matrices ‚Äî dlkjcorr","text":"","code":"dlkjcorr(x, eta = 1, log = TRUE)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/dlkjcorr.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Compute the log-density of the LKJ distribution for correlation matrices ‚Äî dlkjcorr","text":"functions come Richard McElreath's rethinking package , judging source code, seems got Ben Goodrich.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/dlkjcorr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-density of the LKJ distribution for correlation matrices ‚Äî dlkjcorr","text":"x symmetric positive definite matrix 1s diagonal (.e., correlation matrix) eta Numeric. Shape parameter controlling concentration around identity matrix. Must positive. eta = 1, distribution uniform correlation matrices. eta increases, mass placed matrices closer identity matrix log Logical. TRUE (default), returns log-density. FALSE, returns density original scale","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/dlkjcorr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-density of the LKJ distribution for correlation matrices ‚Äî dlkjcorr","text":"Numeric value representing (log) density correlation matrix   LKJ distribution specified eta parameter","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/dlkjcorr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the log-density of the LKJ distribution for correlation matrices ‚Äî dlkjcorr","text":"LKJ density proportional det(R)^(eta-1), R   correlation matrix. function computes density (log-density).   Note unnormalized density - normalizing constant   included.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/dlkjcorr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the log-density of the LKJ distribution for correlation matrices ‚Äî dlkjcorr","text":"Lewandowski, D., Kurowicka, D., & Joe, H. (2009). Generating random correlation matrices based vines extended onion method. Journal multivariate analysis, 100(9), 1989-2001.","code":""},{"path":[]},{"path":"https://acastroaraujo.github.io/protoClassification/reference/get_data_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract parameters from prototypeData object ‚Äî get_data_params","title":"Extract parameters from prototypeData object ‚Äî get_data_params","text":"Retrieves parameters (marginal probabilities correlation matrix) used generate prototypeData object.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/get_data_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract parameters from prototypeData object ‚Äî get_data_params","text":"","code":"get_data_params(x)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/get_data_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract parameters from prototypeData object ‚Äî get_data_params","text":"x prototypeData object created make_binary_data","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/get_data_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract parameters from prototypeData object ‚Äî get_data_params","text":"list two components: marginals Named numeric vector marginal probabilities rho Correlation matrix used generate data","code":""},{"path":[]},{"path":"https://acastroaraujo.github.io/protoClassification/reference/make_binary_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Correlated Binary Data ‚Äî make_binary_data","title":"Make Correlated Binary Data ‚Äî make_binary_data","text":"Generates correlated binary data. function first generates multivariate normal data specified correlations, transforms binary data preserving correlation structure. Apparently known \"Gaussian copula\" approach.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/make_binary_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Correlated Binary Data ‚Äî make_binary_data","text":"","code":"make_binary_data(marginals, rho, obs = 1000)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/make_binary_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Correlated Binary Data ‚Äî make_binary_data","text":"marginals numeric vector marginal probabilities variable. rho symmetric correlation matrix dimensions matching length marginals obs Integer. Number observations (rows) generate.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/make_binary_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Correlated Binary Data ‚Äî make_binary_data","text":"prototypeData object containing: Binary data data frame obs rows length(marginals) columns params attribute List containing original marginals correlation matrix","code":""},{"path":[]},{"path":"https://acastroaraujo.github.io/protoClassification/reference/make_binary_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Correlated Binary Data ‚Äî make_binary_data","text":"","code":"# Generate 8-dimensional correlated binary data K <- 8 marginals <- rbeta(K, 2, 3) rho <- rlkjcorr(1, K, eta = 1 / 4) out <- make_binary_data(marginals, rho) out #>  #> ‚îÄ‚îÄ Data ‚îÄ‚îÄ #>  #> 1000 obs. of  8 variables: #>  $ x1: int  1 0 0 0 0 1 0 0 0 0 ... #>  $ x2: int  1 0 1 0 0 0 1 0 0 1 ... #>  $ x3: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ x4: int  0 0 0 1 1 0 0 0 0 1 ... #>  $ x5: int  0 1 0 1 1 1 1 0 0 1 ... #>  $ x6: int  1 1 1 0 0 0 1 1 1 1 ... #>  $ x7: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ x8: int  0 1 1 0 0 0 0 0 1 0 ... #>  #>  #> ‚îÄ‚îÄ Parameters ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Marginal Probabilities:  #>   x1   x2   x3   x4   x5   x6   x7   x8  #> 0.12 0.47 0.03 0.40 0.56 0.70 0.07 0.34  #>  #>  #> ‚îÄ‚îÄ Correlation Matrix:  #>       x1    x2    x3    x4    x5    x6    x7    x8 #> x1  1.00 -0.11  0.20  0.07  0.33  0.32  0.07 -0.19 #> x2 -0.11  1.00  0.63 -0.25 -0.59  0.78  0.09  0.66 #> x3  0.20  0.63  1.00 -0.19 -0.09  0.57  0.54  0.42 #> x4  0.07 -0.25 -0.19  1.00  0.35 -0.56 -0.02 -0.54 #> x5  0.33 -0.59 -0.09  0.35  1.00 -0.45  0.12 -0.52 #> x6  0.32  0.78  0.57 -0.56 -0.45  1.00 -0.14  0.58 #> x7  0.07  0.09  0.54 -0.02  0.12 -0.14  1.00  0.22 #> x8 -0.19  0.66  0.42 -0.54 -0.52  0.58  0.22  1.00"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/print.compositionalEffect.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for compositionalEffect objects ‚Äî print.compositionalEffect","title":"Print method for compositionalEffect objects ‚Äî print.compositionalEffect","text":"Displays formatted summary effects parameter modifications prototype computations, showing changes category marginal probabilities, probability differences, relative risk ratios.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/print.compositionalEffect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for compositionalEffect objects ‚Äî print.compositionalEffect","text":"","code":"# S3 method for class 'compositionalEffect' print(x, ...)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/print.compositionalEffect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for compositionalEffect objects ‚Äî print.compositionalEffect","text":"x compositionalEffect object created compositionalEffect. ... Additional arguments passed print methods (currently unused).","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/print.compositionalEffect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for compositionalEffect objects ‚Äî print.compositionalEffect","text":"Invisibly returns input object x","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/print.compositionalEffect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print method for compositionalEffect objects ‚Äî print.compositionalEffect","text":"print method displays: Category Marginal Probabilities Shows marginal category probabilities     parameter modification, computed column means     probability matrices Œî Probs probability differences (modified - baseline)     feature within category. Positive values indicate higher probabilities     modified condition Risk Ratio relative risk ratios (modified / baseline)     feature within category. Values > 1 indicate higher relative probability     modified condition, values < 1 indicate lower relative probability numeric values rounded 3 decimal places readability.","code":""},{"path":[]},{"path":"https://acastroaraujo.github.io/protoClassification/reference/print.prototypeComputation.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for prototypeComputation objects ‚Äî print.prototypeComputation","title":"Print method for prototypeComputation objects ‚Äî print.prototypeComputation","text":"Displays formatted summary prototypeComputation object, including data structure, prototypes, distance type, sensitivity parameters, attention weights, marginal probabilities.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/print.prototypeComputation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for prototypeComputation objects ‚Äî print.prototypeComputation","text":"","code":"# S3 method for class 'prototypeComputation' print(x, ...)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/print.prototypeComputation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for prototypeComputation objects ‚Äî print.prototypeComputation","text":"x prototypeComputation object created compute. ... Additional arguments passed print methods (currently unused).","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/print.prototypeComputation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for prototypeComputation objects ‚Äî print.prototypeComputation","text":"Invisibly returns input object x.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/print.prototypeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for prototypeData objects ‚Äî print.prototypeData","title":"Print method for prototypeData objects ‚Äî print.prototypeData","text":"Displays formatted summary prototypeData object, showing data structure parameters used generate (marginal probabilities correlation matrix).","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/print.prototypeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for prototypeData objects ‚Äî print.prototypeData","text":"","code":"# S3 method for class 'prototypeData' print(x, digits = 2, ...)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/print.prototypeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for prototypeData objects ‚Äî print.prototypeData","text":"x prototypeData object created make_binary_data digits Integer. Number decimal places display numeric values (default: 2) ... Currently unused.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/print.summary.prototypeComputation.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Summary Statistics for Prototype Computation Objects ‚Äî print.summary.prototypeComputation","title":"Print Summary Statistics for Prototype Computation Objects ‚Äî print.summary.prototypeComputation","text":"Displays formatted summary prototype-based classification results, showing marginal conditional probability distributions categories features. method provides comprehensive overview prototype model distributes probability mass across categories features.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/print.summary.prototypeComputation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Summary Statistics for Prototype Computation Objects ‚Äî print.summary.prototypeComputation","text":"","code":"# S3 method for class 'summary.prototypeComputation' print(x, ...)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/print.summary.prototypeComputation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Summary Statistics for Prototype Computation Objects ‚Äî print.summary.prototypeComputation","text":"x summary.prototypeComputation object created summary.prototypeComputation. ... Additional arguments passed print methods (currently unused).","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/print.summary.prototypeComputation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Summary Statistics for Prototype Computation Objects ‚Äî print.summary.prototypeComputation","text":"Invisibly returns input object x unchanged. function   called primarily side effect printing formatted output.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/print.summary.prototypeComputation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print Summary Statistics for Prototype Computation Objects ‚Äî print.summary.prototypeComputation","text":"printed output organized two main sections: Categories Section: Marginals: Overall probability assignment category     across observations, computed colMeans(object$probabilities) Conditionals: Two sub-lists showing P(C|X) - probability     category given feature values: Xk=0: Category probabilities feature equals 0 Xk=1: Category probabilities feature equals 1 Features Section: Marginals: Overall probability feature equals 1     across observations, computed colMeans(object$data) Conditionals: probability feature equals 1     given membership category, P(X|C). probability values rounded 3 decimal places readability.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/rlkjcorr.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random correlation matrices from the LKJ distribution ‚Äî rlkjcorr","title":"Generate random correlation matrices from the LKJ distribution ‚Äî rlkjcorr","text":"Generates random correlation matrices LKJ (Lewandowski-Kurowicka-Joe) distribution. LKJ distribution prior distribution correlation matrices generalizes uniform distribution correlation matrices. eta increases, probability mass concentrated around identity matrix.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/rlkjcorr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random correlation matrices from the LKJ distribution ‚Äî rlkjcorr","text":"","code":"rlkjcorr(n, K, eta = 1)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/rlkjcorr.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Generate random correlation matrices from the LKJ distribution ‚Äî rlkjcorr","text":"functions come Richard McElreath's rethinking package , judging source code, seems got Ben Goodrich.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/rlkjcorr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random correlation matrices from the LKJ distribution ‚Äî rlkjcorr","text":"n Integer. Number correlation matrices generate K Integer. Dimension correlation matrix (number rows/columns). Must least 2 eta Numeric. Shape parameter controlling concentration around identity matrix. Must positive. eta = 1, distribution uniform correlation matrices. eta increases, mass placed matrices closer identity matrix","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/rlkjcorr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random correlation matrices from the LKJ distribution ‚Äî rlkjcorr","text":"n = 1, returns single K√óK correlation matrix.   n > 1, returns list n correlation matrices.   matrices symmetric positive definite 1s diagonal.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/rlkjcorr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate random correlation matrices from the LKJ distribution ‚Äî rlkjcorr","text":"Lewandowski, D., Kurowicka, D., & Joe, H. (2009). Generating random correlation matrices based vines extended onion method. Journal multivariate analysis, 100(9), 1989-2001.","code":""},{"path":[]},{"path":"https://acastroaraujo.github.io/protoClassification/reference/rlkjcorr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random correlation matrices from the LKJ distribution ‚Äî rlkjcorr","text":"","code":"# Generate a single 4x4 correlation matrix rho1 <- rlkjcorr(n = 1, K = 4, eta = 1) round(rho1, 2) #>       [,1]  [,2]  [,3]  [,4] #> [1,]  1.00 -0.24 -0.37 -0.48 #> [2,] -0.24  1.00  0.80  0.15 #> [3,] -0.37  0.80  1.00  0.33 #> [4,] -0.48  0.15  0.33  1.00  # Generate 5 correlation matrices with more concentration around identity rho_list <- rlkjcorr(n = 5, K = 3, eta = 4) lapply(rho_list, round, 2) #> [[1]] #>      [,1] [,2] [,3] #> [1,] 1.00 0.39 0.21 #> [2,] 0.39 1.00 0.16 #> [3,] 0.21 0.16 1.00 #>  #> [[2]] #>       [,1]  [,2]  [,3] #> [1,]  1.00 -0.66  0.44 #> [2,] -0.66  1.00 -0.24 #> [3,]  0.44 -0.24  1.00 #>  #> [[3]] #>       [,1]  [,2] [,3] #> [1,]  1.00 -0.37 0.32 #> [2,] -0.37  1.00 0.11 #> [3,]  0.32  0.11 1.00 #>  #> [[4]] #>       [,1] [,2]  [,3] #> [1,]  1.00 0.05 -0.17 #> [2,]  0.05 1.00  0.06 #> [3,] -0.17 0.06  1.00 #>  #> [[5]] #>      [,1]  [,2]  [,3] #> [1,] 1.00  0.01  0.40 #> [2,] 0.01  1.00 -0.31 #> [3,] 0.40 -0.31  1.00 #>"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/ruleStarCondProb.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract theoretical conditional probabilities for the rule-based case with exclusive attention on one feature. ‚Äî ruleStarCondProb","title":"Extract theoretical conditional probabilities for the rule-based case with exclusive attention on one feature. ‚Äî ruleStarCondProb","text":"Computes theoretical conditional probabilities P(X_j = 1 | C = c1) variables j attention focused entirely variable k*. case, P(X_j = 1 | C = c1) = P(X_j = 1 | X_k* = 1) uses bivariate normal distribution compute exact conditional probabilities based correlation structure.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/ruleStarCondProb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract theoretical conditional probabilities for the rule-based case with exclusive attention on one feature. ‚Äî ruleStarCondProb","text":"","code":"ruleStarCondProb(pxk, pxkstar, corr)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/ruleStarCondProb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract theoretical conditional probabilities for the rule-based case with exclusive attention on one feature. ‚Äî ruleStarCondProb","text":"pxk Numeric. Marginal probability P(X_k = 1) variable k. pxkstar Numeric. Marginal probability P(X_k* = 1) attention variable k*. corr Numeric. Correlation variables Xk Xk*.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/ruleStarCondProb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract theoretical conditional probabilities for the rule-based case with exclusive attention on one feature. ‚Äî ruleStarCondProb","text":"Numeric value representing conditional probability P(X_k = 1 | X_k* = 1)","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/ruleStarCondProb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract theoretical conditional probabilities for the rule-based case with exclusive attention on one feature. ‚Äî ruleStarCondProb","text":"function computes joint probability P(X_k = 1, X_k* = 1) using   bivariate normal distribution given correlation structure,   divides P(X_k* = 1) obtain conditional probability.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/ruleStarCondProb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract theoretical conditional probabilities for the rule-based case with exclusive attention on one feature. ‚Äî ruleStarCondProb","text":"","code":"# Compute conditional probability for positively correlated variables ruleStarCondProb(pxk = 0.3, pxkstar = 0.4, corr = 0.5) #> [1] 0.4797267  # Compare with negatively correlated variables ruleStarCondProb(pxk = 0.3, pxkstar = 0.4, corr = -0.5) #> [1] 0.1337113"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/summary.prototypeComputation.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for Prototype Computation Objects ‚Äî summary.prototypeComputation","title":"Summary Method for Prototype Computation Objects ‚Äî summary.prototypeComputation","text":"Computes returns comprehensive summary statistics prototypeComputation object, including marginal conditional probabilities categories features. provides complete statistical overview prototype model results.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/summary.prototypeComputation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for Prototype Computation Objects ‚Äî summary.prototypeComputation","text":"","code":"# S3 method for class 'prototypeComputation' summary(object, s = 500, ...)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/summary.prototypeComputation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for Prototype Computation Objects ‚Äî summary.prototypeComputation","text":"object prototypeComputation object created compute. s Integer. Number draws sample probabilities computing conditional probabilities. Default 500. Higher values provide stable estimates. ... Additional arguments (currently unused).","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/summary.prototypeComputation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for Prototype Computation Objects ‚Äî summary.prototypeComputation","text":"summary.prototypeComputation object containing: marginal List marginal probabilities: categories: Vector category marginal probabilities features: Vector feature marginal probabilities  conditional List conditional probabilities: categories: P(C|X) feature values 0 1 features: P(X|C) matrix","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/summary.prototypeComputation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary Method for Prototype Computation Objects ‚Äî summary.prototypeComputation","text":"summary provides four key probability distributions: Category Marginals: Overall probability category     across observations Feature Marginals: Overall probability feature     1 across observations Conditional Features: P(X_k = 1 | C_j) feature k     category j Conditional Categories: P(C_j | X_k = 0) P(C_j | X_k = 1)     category j feature k","code":""},{"path":[]},{"path":"https://acastroaraujo.github.io/protoClassification/reference/temperature.html","id":null,"dir":"Reference","previous_headings":"","what":"Temperature Scaling for Probability Distributions ‚Äî temperature","title":"Temperature Scaling for Probability Distributions ‚Äî temperature","text":"Applies temperature scaling probability distribution using softmax function.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/temperature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temperature Scaling for Probability Distributions ‚Äî temperature","text":"","code":"temperature(w, temp)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/temperature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temperature Scaling for Probability Distributions ‚Äî temperature","text":"w numeric vector probabilities must sum 1. values must 0 1 (inclusive). function validate sum equals 1 within floating-point precision (tolerance 1e-10). temp single numeric value specifying temperature parameter. Must non-negative (>= 0). temp > 1: Makes distribution uniform (smoother, less peaked) temp < 1: Makes distribution less uniform (sharper, peaked) temp = 1: change original distribution temp = 0: Returns vector 1 position maximum probability 0 otherwise","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/temperature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temperature Scaling for Probability Distributions ‚Äî temperature","text":"numeric vector length w containing temperature-scaled   probabilities. returned vector sum 1 values 0 1.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/temperature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temperature Scaling for Probability Distributions ‚Äî temperature","text":"","code":"w <- runif(4) w <- w / sum(w)  w #> [1] 0.01373785 0.13930836 0.22925414 0.61769965  temperature(w, temp = 0) #> [1] 0 0 0 1 temperature(w, temp = 0.5) #> [1] 0.0004159713 0.0427740085 0.1158403779 0.8409696423 temperature(w, temp = 1) #> [1] 0.01373785 0.13930836 0.22925414 0.61769965"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/transform_rho.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform correlation matrix by setting specific correlations ‚Äî transform_rho","title":"Transform correlation matrix by setting specific correlations ‚Äî transform_rho","text":"Modifies correlation matrix setting specific -diagonal elements desired values, adjusts matrix ensure remains positive definite. useful creating correlation matrices specific patterns maintaining mathematical validity.","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/transform_rho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform correlation matrix by setting specific correlations ‚Äî transform_rho","text":"","code":"transform_rho(rho, el)"},{"path":"https://acastroaraujo.github.io/protoClassification/reference/transform_rho.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform correlation matrix by setting specific correlations ‚Äî transform_rho","text":"rho correlation matrix el matrix 3 columns specifying transformations apply: Column 1 Row indices () correlations modify Column 2 Column indices (j) correlations modify Column 3 New correlation values set rho[,j] correlation values must -1 1","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/transform_rho.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform correlation matrix by setting specific correlations ‚Äî transform_rho","text":"transformed correlation matrix positive definite.   function automatically ensures symmetry (sets rho[,j] rho[j,])   uses nearPD find nearest positive definite matrix   specified correlations make matrix non-positive definite","code":""},{"path":"https://acastroaraujo.github.io/protoClassification/reference/transform_rho.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform correlation matrix by setting specific correlations ‚Äî transform_rho","text":"function first sets specified correlations symmetric positions matrix, uses nearPD function Matrix package find nearest positive definite correlation matrix. Information convergence printed console.","code":""},{"path":[]},{"path":"https://acastroaraujo.github.io/protoClassification/reference/transform_rho.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform correlation matrix by setting specific correlations ‚Äî transform_rho","text":"","code":"# Start with a random correlation matrix rho <- rlkjcorr(n = 1, K = 4, eta = 1) round(rho, 2) #>       [,1]  [,2]  [,3]  [,4] #> [1,]  1.00 -0.29 -0.61 -0.59 #> [2,] -0.29  1.00 -0.31 -0.15 #> [3,] -0.61 -0.31  1.00  0.91 #> [4,] -0.59 -0.15  0.91  1.00  # Define specific correlations to set el <- rbind(   c(i = 1, j = 2, r = +0.7), # Set correlation between variables 1 and 2 to 0.7   c(i = 3, j = 4, r = -0.5)  # Set correlation between variables 3 and 4 to -0.5 )  # Transform the matrix rho_new <- transform_rho(rho, el) #> iterations: 14 #> converged: TRUE round(rho_new, 2) #>       [,1]  [,2]  [,3]  [,4] #> [1,]  1.00  0.67 -0.53 -0.50 #> [2,]  0.67  1.00 -0.34 -0.17 #> [3,] -0.53 -0.34  1.00 -0.43 #> [4,] -0.50 -0.17 -0.43  1.00  # Verify the specified correlations were set rho_new[1, 2]  # Should be close to 0.7 #> [1] 0.6709284 rho_new[3, 4]  # Should be close to -0.5 #> [1] -0.4335107"}]
